{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Gateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IStarknetCore.sol\";\n\ncontract Gateway {\n    uint256 public endpointGateway;\n    IStarknetCore public starknetCore;\n    uint256 constant ENDPOINT_GATEWAY_SELECTOR =\n        1738423374452994793145864788013146788518531877200292826651981332061687045062;\n    uint256 constant BRIDGE_MODE_DEPOSIT = 0;\n    uint256 constant BRIDGE_MODE_WITHDRAW = 1;\n    uint256 public counter=0;\n\n    // Bootstrap\n    constructor(address _starknetCore, uint256 _endpointGateway) {\n        require(\n            _starknetCore != address(0),\n            \"Gateway/invalid-starknet-core-address\"\n        );\n        require(\n            _endpointGateway != 0,\n            \"Gateway/invalid-starknet-gateway-address\"\n        );\n\n        starknetCore = IStarknetCore(_starknetCore);\n        endpointGateway = _endpointGateway;\n    }\n\n\n    function changegateway(uint256 gateway)\n     external {\n        endpointGateway = gateway;\n    }\n\n    function changestark(address starknet) external{\n        starknetCore = IStarknetCore(starknet);\n    }\n\n    // Utils\n    function addressToUint(address value)\n        internal\n        pure\n        returns (uint256 convertedValue)\n    {\n        convertedValue = uint256(uint160(address(value)));\n    }\n\n    event BridgeToStarknet(\n        address indexed l1ERC721,\n        uint256 indexed l2Account,\n        uint256 tokenId\n    );\n    event BridgeFromStarknet(\n        address indexed l1ERC721,\n        uint256 indexed l2ERC721,\n        address indexed l1Account,\n        uint256 tokenId\n    );\n\n    // Bridging to Starknet\n    function bridgeToStarknet(\n        IERC721 _l1TokenContract,\n        uint256 _tokenId,\n        uint256 _account,\n        uint256 _floorprice,\n        uint256 _requiredtoken\n\n    ) payable external {\n        uint256[] memory payload = new uint256[](6);\n\n        // optimistic transfer, should revert if no approved or not owner\n        _l1TokenContract.transferFrom(msg.sender, address(this), _tokenId);\n\n        // build deposit message payload\n        payload[0] = _account;\n        payload[1] = addressToUint(address(_l1TokenContract));\n        payload[2] = _tokenId;\n        payload[3] =  _floorprice;\n        payload[4] = _requiredtoken;\n        payload[5] = counter++;\n\n\n        // send message\n        starknetCore.sendMessageToL2{value: msg.value}(\n            endpointGateway,\n            ENDPOINT_GATEWAY_SELECTOR,\n            payload\n        );\n\n        emit BridgeToStarknet(\n            address(_l1TokenContract),\n           \n            _account,\n            _tokenId\n        );\n    }\n\n    function bridgeFromStarknetAvailable(\n        IERC721 _l1TokenContract,\n        uint256 _l2TokenContract,\n        uint256 _tokenId\n    ) external view returns (bool) {\n        uint256[] memory payload = new uint256[](5);\n\n        // build withdraw message payload\n        payload[0] = BRIDGE_MODE_WITHDRAW;\n        payload[1] = addressToUint(msg.sender);\n        payload[2] = addressToUint(address(_l1TokenContract));\n        payload[3] = _l2TokenContract;\n        payload[4] = _tokenId;\n\n        bytes32 msgHash = keccak256(\n            abi.encodePacked(\n                endpointGateway,\n                addressToUint(address(this)),\n                payload.length,\n                payload\n            )\n        );\n\n        return starknetCore.l2ToL1Messages(msgHash) > 0;\n    }\n\n    function debug_bridgeFromStarknetAvailable(\n        IERC721 _l1TokenContract,\n        uint256 _l2TokenContract,\n        uint256 _tokenId\n    ) external view returns (bytes32) {\n        uint256[] memory payload = new uint256[](5);\n\n        // build withdraw message payload\n        payload[0] = BRIDGE_MODE_WITHDRAW;\n        payload[1] = addressToUint(msg.sender);\n        payload[2] = addressToUint(address(_l1TokenContract));\n        payload[3] = _l2TokenContract;\n        payload[4] = _tokenId;\n\n        bytes32 msgHash = keccak256(\n            abi.encodePacked(\n                endpointGateway,\n                addressToUint(address(this)),\n                payload.length,\n                payload\n            )\n        );\n\n        return msgHash;\n    }\n\n    // Bridging back from Starknet\n    function bridgeFromStarknet(\n        IERC721 _l1TokenContract,\n        uint256 _l2TokenContract,\n        uint256 _tokenId\n    ) external {\n        uint256[] memory payload = new uint256[](5);\n\n        // build withdraw message payload\n        payload[0] = BRIDGE_MODE_WITHDRAW;\n        payload[1] = addressToUint(msg.sender);\n        payload[2] = addressToUint(address(_l1TokenContract));\n        payload[3] = _l2TokenContract;\n        payload[4] = _tokenId;\n\n        // consum withdraw message\n        starknetCore.consumeMessageFromL2(endpointGateway, payload);\n\n        // optimistic transfer, should revert if gateway is not token owner\n        _l1TokenContract.transferFrom(address(this), msg.sender, _tokenId);\n\n        emit BridgeFromStarknet(\n            address(_l1TokenContract),\n            _l2TokenContract,\n            msg.sender,\n            _tokenId\n        );\n    }\n}\n"
    },
    "contracts/IStarknetCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStarknetCore {\n    /**\n      Sends a message to an L2 contract.\n    */\n    function sendMessageToL2(\n        uint256 to_address,\n        uint256 selector,\n        uint256[] calldata payload\n    ) payable external;\n\n    /**\n      Consumes a message that was sent from an L2 contract.\n    */\n    function consumeMessageFromL2(\n        uint256 fromAddress,\n        uint256[] calldata payload\n    ) external;\n\n    /**\n      Message registry\n     */\n    function l2ToL1Messages(bytes32 msgHash) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}