{
  "address": "0xcDAa2Db7F970058cd373d5E68c10136ebAcF4160",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_starknetCore",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_endpointGateway",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1ERC721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "l2ERC721",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BridgeFromStarknet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1ERC721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "l2Account",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BridgeToStarknet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bridgeFromStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bridgeFromStarknetAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_account",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_floorprice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requiredtoken",
          "type": "uint256"
        }
      ],
      "name": "bridgeToStarknet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gateway",
          "type": "uint256"
        }
      ],
      "name": "changegateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "starknet",
          "type": "address"
        }
      ],
      "name": "changestark",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "debug_bridgeFromStarknetAvailable",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpointGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starknetCore",
      "outputs": [
        {
          "internalType": "contract IStarknetCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x12cdd3cd66c24a401034b82984f4678925caa556730b962763fe8a9d15a1d201",
  "receipt": {
    "to": null,
    "from": "0xfb46D77E67a59Cf985d56aF1aF19c51cEB6206ea",
    "contractAddress": "0xcDAa2Db7F970058cd373d5E68c10136ebAcF4160",
    "transactionIndex": 52,
    "gasUsed": "1232594",
    "logsBloom": "0x
    "blockHash": "0x0e1a5408268c3c072a309c340c39d50c738218501961932fa3ef80eaca10cacf",
    "transactionHash": "0x12cdd3cd66c24a401034b82984f4678925caa556730b962763fe8a9d15a1d201",
    "logs": [],
    "blockNumber": 8053089,
    "cumulativeGasUsed": "19852402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xde29d060D45901Fb19ED6C6e959EB22d8626708e",
    "0x06f910b32963816cc5b8b9c8ca23c3296c69d5944ed86cff92e2b4d76b4d232e"
  ],
  "numDeployments": 8,
  "solcInputHash": "7b40ccf3170f6c04f974848ae5b2b305",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starknetCore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endpointGateway\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1ERC721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2ERC721\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeFromStarknet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1ERC721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2Account\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeToStarknet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeFromStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeFromStarknetAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_account\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floorprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredtoken\",\"type\":\"uint256\"}],\"name\":\"bridgeToStarknet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gateway\",\"type\":\"uint256\"}],\"name\":\"changegateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"starknet\",\"type\":\"address\"}],\"name\":\"changestark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"debug_bridgeFromStarknetAvailable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpointGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IStarknetCore.sol\\\";\\n\\ncontract Gateway {\\n    uint256 public endpointGateway;\\n    IStarknetCore public starknetCore;\\n    uint256 constant ENDPOINT_GATEWAY_SELECTOR =\\n        1738423374452994793145864788013146788518531877200292826651981332061687045062;\\n    uint256 constant BRIDGE_MODE_DEPOSIT = 0;\\n    uint256 constant BRIDGE_MODE_WITHDRAW = 1;\\n    uint256 public counter=0;\\n\\n    // Bootstrap\\n    constructor(address _starknetCore, uint256 _endpointGateway) {\\n        require(\\n            _starknetCore != address(0),\\n            \\\"Gateway/invalid-starknet-core-address\\\"\\n        );\\n        require(\\n            _endpointGateway != 0,\\n            \\\"Gateway/invalid-starknet-gateway-address\\\"\\n        );\\n\\n        starknetCore = IStarknetCore(_starknetCore);\\n        endpointGateway = _endpointGateway;\\n    }\\n\\n\\n    function changegateway(uint256 gateway)\\n     external {\\n        endpointGateway = gateway;\\n    }\\n\\n    function changestark(address starknet) external{\\n        starknetCore = IStarknetCore(starknet);\\n    }\\n\\n    // Utils\\n    function addressToUint(address value)\\n        internal\\n        pure\\n        returns (uint256 convertedValue)\\n    {\\n        convertedValue = uint256(uint160(address(value)));\\n    }\\n\\n    event BridgeToStarknet(\\n        address indexed l1ERC721,\\n        uint256 indexed l2Account,\\n        uint256 tokenId\\n    );\\n    event BridgeFromStarknet(\\n        address indexed l1ERC721,\\n        uint256 indexed l2ERC721,\\n        address indexed l1Account,\\n        uint256 tokenId\\n    );\\n\\n    // Bridging to Starknet\\n    function bridgeToStarknet(\\n        IERC721 _l1TokenContract,\\n        uint256 _tokenId,\\n        uint256 _account,\\n        uint256 _floorprice,\\n        uint256 _requiredtoken\\n\\n    ) payable external {\\n        uint256[] memory payload = new uint256[](6);\\n\\n        // optimistic transfer, should revert if no approved or not owner\\n        _l1TokenContract.transferFrom(msg.sender, address(this), _tokenId);\\n\\n        // build deposit message payload\\n        payload[0] = _account;\\n        payload[1] = addressToUint(address(_l1TokenContract));\\n        payload[2] = _tokenId;\\n        payload[3] = _floorprice;\\n        payload[4] =  0;\\n        payload[5] = _requiredtoken;\\n        \\n\\n        // send message\\n        starknetCore.sendMessageToL2{value: msg.value}(\\n            endpointGateway,\\n            ENDPOINT_GATEWAY_SELECTOR,\\n            payload\\n        );\\n\\n        emit BridgeToStarknet(\\n            address(_l1TokenContract),\\n           \\n            _account,\\n            _tokenId\\n        );\\n    }\\n\\n    function bridgeFromStarknetAvailable(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external view returns (bool) {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = BRIDGE_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\n                endpointGateway,\\n                addressToUint(address(this)),\\n                payload.length,\\n                payload\\n            )\\n        );\\n\\n        return starknetCore.l2ToL1Messages(msgHash) > 0;\\n    }\\n\\n    function debug_bridgeFromStarknetAvailable(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external view returns (bytes32) {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = BRIDGE_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\n                endpointGateway,\\n                addressToUint(address(this)),\\n                payload.length,\\n                payload\\n            )\\n        );\\n\\n        return msgHash;\\n    }\\n\\n    // Bridging back from Starknet\\n    function bridgeFromStarknet(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = BRIDGE_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        // consum withdraw message\\n        starknetCore.consumeMessageFromL2(endpointGateway, payload);\\n\\n        // optimistic transfer, should revert if gateway is not token owner\\n        _l1TokenContract.transferFrom(address(this), msg.sender, _tokenId);\\n\\n        emit BridgeFromStarknet(\\n            address(_l1TokenContract),\\n            _l2TokenContract,\\n            msg.sender,\\n            _tokenId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x62505b4b259237d32b8cc3aec2d81df0a6ec6ac9b6c74a4371d3e72c9f3b8f57\",\"license\":\"MIT\"},\"contracts/IStarknetCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStarknetCore {\\n    /**\\n      Sends a message to an L2 contract.\\n    */\\n    function sendMessageToL2(\\n        uint256 to_address,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) payable external;\\n\\n    /**\\n      Consumes a message that was sent from an L2 contract.\\n    */\\n    function consumeMessageFromL2(\\n        uint256 fromAddress,\\n        uint256[] calldata payload\\n    ) external;\\n\\n    /**\\n      Message registry\\n     */\\n    function l2ToL1Messages(bytes32 msgHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe8a178cb7b8803179398ff5345f693aaa24e2873592c65d13dabb16a622822ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806361bc221a1161005957806361bc221a1461012657806366fbae521461015157806369aab3331461017a578063880f825b146101a35780638af6bae9146101e057610086565b80632022c3be1461008b578063285347dc146100a757806339e730ab146100d057806341b3a0a1146100fb575b600080fd5b6100a560048036038101906100a09190610f8b565b61021d565b005b3480156100b357600080fd5b506100ce60048036038101906100c99190610f13565b6105be565b005b3480156100dc57600080fd5b506100e5610602565b6040516100f29190611277565b60405180910390f35b34801561010757600080fd5b50610110610628565b60405161011d9190611292565b60405180910390f35b34801561013257600080fd5b5061013b61062e565b6040516101489190611292565b60405180910390f35b34801561015d57600080fd5b5061017860048036038101906101739190610f3c565b610634565b005b34801561018657600080fd5b506101a1600480360381019061019c9190611002565b610988565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190610f3c565b610992565b6040516101d7919061125c565b60405180910390f35b3480156101ec57600080fd5b5061020760048036038101906102029190610f3c565b610bc2565b6040516102149190611241565b60405180910390f35b6000600667ffffffffffffffff811115610260577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561028e5781602001602082028036833780820191505090505b5090508573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016102ce9392919061120a565b600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b50505050838160008151811061033b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061035086610e9f565b8160018151811061038a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505084816002815181106103d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508281600381518110610418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600081600481518110610460577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505081816005815181106104a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c5346000547f03d7e9aabaee46b2e84062eb3bca33a0c08e1142b329c095d47ec3d6af1adbc6856040518563ffffffff1660e01b8152600401610535939291906112dd565b6000604051808303818588803b15801561054e57600080fd5b505af1158015610562573d6000803e3d6000fd5b5050505050838673ffffffffffffffffffffffffffffffffffffffff167fcc6251e8905db32bc1df4300b993b6e1256dea158705f1e5b92066a2422ddd09876040516105ae9190611292565b60405180910390a3505050505050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60025481565b6000600567ffffffffffffffff811115610677577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156106a55781602001602082028036833780820191505090505b5090506001816000815181106106e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506106f933610e9f565b81600181518110610733577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061074884610e9f565b81600281518110610782577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106107c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508181600481518110610810577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600054836040518363ffffffff1660e01b815260040161087b9291906112ad565b600060405180830381600087803b15801561089557600080fd5b505af11580156108a9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016108ea9392919061120a565b600060405180830381600087803b15801561090457600080fd5b505af1158015610918573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f3c79007e2a0060755a5fcb7ba40951f8249cfe7de5359d6f78f902bd64c6b54d8560405161097a9190611292565b60405180910390a450505050565b8060008190555050565b600080600567ffffffffffffffff8111156109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a045781602001602082028036833780820191505090505b509050600181600081518110610a43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610a5833610e9f565b81600181518110610a92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610aa785610e9f565b81600281518110610ae1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508381600381518110610b28577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508281600481518110610b6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060008054610b8830610e9f565b835184604051602001610b9e94939291906111c0565b60405160208183030381529060405280519060200120905080925050509392505050565b600080600567ffffffffffffffff811115610c06577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610c345781602001602082028036833780820191505090505b509050600181600081518110610c73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610c8833610e9f565b81600181518110610cc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610cd785610e9f565b81600281518110610d11577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508381600381518110610d58577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508281600481518110610d9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060008054610db830610e9f565b835184604051602001610dce94939291906111c0565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a46efaf3836040518263ffffffff1660e01b8152600401610e43919061125c565b60206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e93919061102b565b11925050509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b600081359050610ece816113f1565b92915050565b600081359050610ee381611408565b92915050565b600081359050610ef88161141f565b92915050565b600081519050610f0d8161141f565b92915050565b600060208284031215610f2557600080fd5b6000610f3384828501610ebf565b91505092915050565b600080600060608486031215610f5157600080fd5b6000610f5f86828701610ed4565b9350506020610f7086828701610ee9565b9250506040610f8186828701610ee9565b9150509250925092565b600080600080600060a08688031215610fa357600080fd5b6000610fb188828901610ed4565b9550506020610fc288828901610ee9565b9450506040610fd388828901610ee9565b9350506060610fe488828901610ee9565b9250506080610ff588828901610ee9565b9150509295509295909350565b60006020828403121561101457600080fd5b600061102284828501610ee9565b91505092915050565b60006020828403121561103d57600080fd5b600061104b84828501610efe565b91505092915050565b6000611060838361117c565b60208301905092915050565b6000611078838361119a565b60208301905092915050565b61108d8161135f565b82525050565b600061109e8261132b565b6110a88185611343565b93506110b38361131b565b8060005b838110156110e45781516110cb8882611054565b97506110d683611336565b9250506001810190506110b7565b5085935050505092915050565b60006110fc8261132b565b6111068185611354565b93506111118361131b565b8060005b83811015611142578151611129888261106c565b975061113483611336565b925050600181019050611115565b5085935050505092915050565b61115881611371565b82525050565b6111678161137d565b82525050565b611176816113c3565b82525050565b611185816113b9565b82525050565b611194816113b9565b82525050565b6111a3816113b9565b82525050565b6111ba6111b5826113b9565b6113e7565b82525050565b60006111cc82876111a9565b6020820191506111dc82866111a9565b6020820191506111ec82856111a9565b6020820191506111fc82846110f1565b915081905095945050505050565b600060608201905061121f6000830186611084565b61122c6020830185611084565b611239604083018461118b565b949350505050565b6000602082019050611256600083018461114f565b92915050565b6000602082019050611271600083018461115e565b92915050565b600060208201905061128c600083018461116d565b92915050565b60006020820190506112a7600083018461118b565b92915050565b60006040820190506112c2600083018561118b565b81810360208301526112d48184611093565b90509392505050565b60006060820190506112f2600083018661118b565b6112ff602083018561118b565b81810360408301526113118184611093565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600061136a82611399565b9050919050565b60008115159050919050565b6000819050919050565b60006113928261135f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113ce826113d5565b9050919050565b60006113e082611399565b9050919050565b6000819050919050565b6113fa8161135f565b811461140557600080fd5b50565b61141181611387565b811461141c57600080fd5b50565b611428816113b9565b811461143357600080fd5b5056fea26469706673582212206d1fd601c1241db54a6988203bc985c5fc27bcea649a123e99a84f6885e7c16064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "endpointGateway",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 136,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "starknetCore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStarknetCore)634"
      },
      {
        "astId": 148,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "counter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(IStarknetCore)634": {
        "encoding": "inplace",
        "label": "contract IStarknetCore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}